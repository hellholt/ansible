---
- name: 'Set a fact for the user.'
  ansible.builtin.set_fact:
    sh_user: "{{ ansible_env.SUDO_USER | default(ansible_env.USER, true) | default(ansible_user_id, true) }}"
  become: no
  when: 'sh_user is not defined'

- name: 'Run a command to determine the user''s primary group.'
  ansible.builtin.command:
    cmd: 'id -gn'
  register: 'sh_group_command'
  when: 'sh_group is not defined'
  changed_when: no

- name: 'Run a command to determine the user''s uid.'
  ansible.builtin.command:
    cmd: 'id -u'
  register: 'sh_uid_command'
  when: 'sh_uid is not defined'
  changed_when: no

- name: 'Run a command to determine the user''s primary gid.'
  ansible.builtin.command:
    cmd: 'id -g'
  register: 'sh_gid_command'
  when: 'sh_gid is not defined'
  changed_when: no

- name: 'Set a fact for the group.'
  ansible.builtin.set_fact:
    sh_group: "{{ sh_group_command.stdout }}"
  when: 'sh_group is not defined and sh_group_command is defined'

- name: 'Set a fact for the uid.'
  ansible.builtin.set_fact:
    sh_uid: "{{ sh_uid_command.stdout | int }}"
  when: 'sh_uid is not defined and sh_uid_command is defined'

- name: 'Set a fact for the gid.'
  ansible.builtin.set_fact:
    sh_gid: "{{ sh_gid_command.stdout | int }}"
  when: 'sh_gid is not defined and sh_gid_command is defined'

- name: 'Set a fact for the user @ hostname.'
  ansible.builtin.set_fact:
    sh_user_at_hostname: "{{ ( sh_user + '@' + sh_hostname ) | lower }}"
